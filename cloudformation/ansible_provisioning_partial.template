AWSTemplateFormatVersion: 2010-09-09
Resources:
  LambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: '/service-role/'
      RoleName: 'ansible-lambda-role'
  LambdaPolicyDocument:
    Type: 'AWS::IAM::ManagedPolicy'
    DependsOn: LambdaRole
    Properties:
      ManagedPolicyName: ansible-lambda-policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'ssm:*'
              - 'ec2:DescribeInstances'
              - 'ec2:CreateTags'
            Resource: '*'
          - Effect: Allow
            Action:
              - 'logs:CreateLogGroup'
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
            Resource: 'arn:aws:logs:*:*:*'
      Roles:
        - !Ref LambdaRole
  LambdaFunction:
    Type: 'AWS::Lambda::Function'
    DependsOn: [
        LambdaRole,
        LambdaPolicyDocument
    ]
    Properties:
      Role: !GetAtt LambdaRole.Arn
      Handler: lambda_function.lambda_handler
      Runtime: python3.8
      FunctionName: ansible-provisioning
      Timeout: 15
      MemorySize: 128
      Code:
        S3Bucket: !ImportValue LambdaBucket
        S3Key: lambda.zip
      Environment:
        Variables:
          code_bucket: acg-demo-ansible
  LambdaEventInvokeConfig:
    Type: 'AWS::Lambda::EventInvokeConfig'
    DependsOn: LambdaFunction
    Properties:
      FunctionName: !Ref LambdaFunction
      MaximumRetryAttempts: 1
      Qualifier: "$LATEST"
  Ec2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: '/'
      Description: 'Allows EC2 instances to call AWS services on your behalf.'
      RoleName: 'ec2-ssm-role'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore'
        - 'arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess'
  Ec2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref Ec2InstanceRole
      Path: '/'
      InstanceProfileName: 'ec2-ssm-role'
Outputs:
  Ec2SsmInstanceProfile:
    Value: !Ref Ec2InstanceProfile
    Description: EC2 Instance Profile
    Export:
      Name: Ec2SsmInstanceProfile